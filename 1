graph={ 
    'A':['B','C'], 
    'B':['D','E'], 
    'C':['F','G'], 
    'D':['H','I'], 
    'E':[], 
    'F':['J','K'], 
    'G':[], 
    'H':[], 
    'I':[], 
    'J':[], 
    'K':[] 
} 

# BFS Implementation
def bfs(visited, graph, node): 
    visited = [] 
    queue = [] 
    
    visited.append(node) 
    queue.append(node) 
    
    while queue: 
        m = queue.pop(0) 
        print(m, end=" ") 
        
        for neighbour in graph[m]: 
            if neighbour not in visited: 
                visited.append(neighbour) 
                queue.append(neighbour) 

print("\nFollowing is the BFS traversal:")
bfs([], graph, 'A')

# DFS Implementation
def dfs(visited, graph, node): 
    if node not in visited: 
        print(node, end=" ") 
        visited.add(node) 
        for neighbour in graph[node]: 
            dfs(visited, graph, neighbour)

print("\nFollowing is the DFS traversal:")
dfs(set(), graph, 'A')
